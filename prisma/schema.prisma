// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Course {
  id           Int        @id @default(autoincrement())
  title        String     @unique @db.VarChar(255)
  description  String     @db.Text
  duration     String     @db.VarChar(255)
  price        Float      @db.Double
  level        Level
  thumbnail    String?    @db.VarChar(255)
  startDate    DateTime?
  endDate      DateTime?
  category     Category   @relation(fields: [categoryId], references: [id])
  categoryId   Int
  instructor   Instructor @relation(fields: [instructorId], references: [id])
  instructorId Int
  reviewRating Float?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  reviews      Review[]
}

enum Level {
  Beginner
  Intermediate
  Advanced
}

model Category {
  id                    Int                   @id @default(autoincrement())
  name                  String                @unique @db.VarChar(255)
  subCategories         SubCategory[]
  courses               Course[]
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  categorySubcategories CategorySubcategory[]
}

model SubCategory {
  id                    Int                   @id @default(autoincrement())
  name                  String                @unique @db.VarChar(255)
  categories            Category[]
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  categorySubcategories CategorySubcategory[]
}

model CategorySubcategory {
  id            Int         @id @default(autoincrement())
  categoryId    Int
  subCategoryId Int
  category      Category    @relation(fields: [categoryId], references: [id])
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])

  @@index([categoryId])
  @@index([subCategoryId])
}

model Instructor {
  id        Int      @id @default(autoincrement())
  firstName String   @db.VarChar(255)
  lastName  String   @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  image     String?
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Float    @default(0)
  comment   String?  @db.Text
  courseId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}
